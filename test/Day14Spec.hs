module Day14Spec where

import qualified Data.Set as S
import Day14
  ( fallDown,
    fallDown2,
    flatten,
    grid,
    parse,
    simulateFalling,
    simulateFalling2,
  )
import Test.Hspec (Spec, describe, it, shouldBe)

testTrace :: [[Char]]
testTrace = ["498,4 -> 498,6 -> 496,6", "503,4 -> 502,4 -> 502,9 -> 494,9"]

spec :: Spec
spec = do
  describe "Distress Signal" $ do
    it "should parse scan traces" $ do
      parse testTrace
        `shouldBe` [(498, 4), (498, 5), (498, 6), (496, 6), (497, 6), (498, 6), (502, 4), (503, 4), (502, 4), (502, 5), (502, 6), (502, 7), (502, 8), (502, 9), (494, 9), (495, 9), (496, 9), (497, 9), (498, 9), (499, 9), (500, 9), (501, 9), (502, 9)]

    it "should create a grid from a pouringPoint and a list of points" $ do
      grid (500, 0) [(498, 4), (498, 5), (498, 6), (496, 6), (497, 6), (498, 6), (502, 4), (503, 4), (502, 4), (502, 5), (502, 6), (502, 7), (502, 8), (502, 9), (494, 9), (495, 9), (496, 9), (497, 9), (498, 9), (499, 9), (500, 9), (501, 9), (502, 9)]
        `shouldBe` ((500, 0), S.fromList [(494, 9), (495, 9), (496, 6), (496, 9), (497, 6), (497, 9), (498, 4), (498, 5), (498, 6), (498, 9), (499, 9), (500, 9), (501, 9), (502, 4), (502, 5), (502, 6), (502, 7), (502, 8), (502, 9), (503, 4)])

    it "should check whether a sand can land" $ do
      fallDown (498, 6) 9 (S.fromList [(494, 9), (495, 9), (496, 6), (496, 9), (497, 6), (497, 9), (498, 4), (498, 5), (498, 6), (498, 9), (499, 9), (500, 9), (501, 9), (502, 4), (502, 5), (502, 6), (502, 7), (502, 8), (502, 9), (503, 4)])
        `shouldBe` Nothing
      fallDown (495, 6) 9 (S.fromList [(494, 9), (495, 9), (496, 6), (496, 9), (497, 6), (497, 9), (498, 4), (498, 5), (498, 6), (498, 9), (499, 9), (500, 9), (501, 9), (502, 4), (502, 5), (502, 6), (502, 7), (502, 8), (502, 9), (503, 4)])
        `shouldBe` Just (495, 8)

    it "should check whether a sand can land with infinite x direction" $ do
      fallDown2 (495, 6) 9 (S.fromList [(494, 9), (495, 9), (496, 6), (496, 9), (497, 6), (497, 9), (498, 4), (498, 5), (498, 6), (498, 9), (499, 9), (500, 9), (501, 9), (502, 4), (502, 5), (502, 6), (502, 7), (502, 8), (502, 9), (503, 4)])
        `shouldBe` Just (495, 8)
      fallDown2 (700, 6) 9 (S.fromList [(494, 9), (495, 9), (496, 6), (496, 9), (497, 6), (497, 9), (498, 4), (498, 5), (498, 6), (498, 9), (499, 9), (500, 9), (501, 9), (502, 4), (502, 5), (502, 6), (502, 7), (502, 8), (502, 9), (503, 4)])
        `shouldBe` Just (700, 9)

    it "should simulate a simple falling of sand" $ do
      simulateFalling ((500, 0), S.fromList [(494, 9), (495, 9), (496, 6), (496, 9), (497, 6), (497, 9), (498, 4), (498, 5), (498, 6), (498, 9), (499, 9), (500, 9), (501, 9), (502, 4), (502, 5), (502, 6), (502, 7), (502, 8), (502, 9), (503, 4)])
        `shouldBe` 24

    it "should simulate a filling of the grid with sand" $ do
      simulateFalling2 ((500, 0), S.fromList [(494, 9), (495, 9), (496, 6), (496, 9), (497, 6), (497, 9), (498, 4), (498, 5), (498, 6), (498, 9), (499, 9), (500, 9), (501, 9), (502, 4), (502, 5), (502, 6), (502, 7), (502, 8), (502, 9), (503, 4)])
        `shouldBe` 93

    it "should flatten a path" $ do
      flatten (1, 0) (10, 0) `shouldBe` [(1, 0), (2, 0), (3, 0), (4, 0), (5, 0), (6, 0), (7, 0), (8, 0), (9, 0), (10, 0)]
      flatten (1, 3) (10, 3) `shouldBe` [(1, 3), (2, 3), (3, 3), (4, 3), (5, 3), (6, 3), (7, 3), (8, 3), (9, 3), (10, 3)]
      flatten (1, 3) (1, 5) `shouldBe` [(1, 3), (1, 4), (1, 5)]